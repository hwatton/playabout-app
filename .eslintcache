[{"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\index.js":"1","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\reportWebVitals.js":"2","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\App.js":"3","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\playground.jsx":"4","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\normal.jsx":"5","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\hookD3Component.jsx":"6","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\board.jsx":"7","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\square.jsx":"8","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\knight.jsx":"9","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\motionDiv.jsx":"10","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3popUpdiv.jsx":"11","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\functions.js":"12","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\hoverDiv.jsx":"13","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\names.js":"14","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\styleD\\styledWithTailwind.jsx":"15","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\interactiveGraph.jsx":"16","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\linegraph.jsx":"17","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\barChart.jsx":"18","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\pieChart.jsx":"19","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\routing.js":"20","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\routerNavBar.jsx":"21","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3div.jsx":"22","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\navbar\\navbar.jsx":"23","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\about\\about.jsx":"24","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\contact\\contact.jsx":"25","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\rainbowCols.js":"26","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\contact\\contactInfo.jsx":"27","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squares.jsx":"28","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squaredata.js":"29","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squareGrid.jsx":"30","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\gridHolder.jsx":"31","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\maze.jsx":"32","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\mazeGrid.jsx":"33","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\mazeFunction.js":"34","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\windowSizeHook.js":"35","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3TestPage\\d3TestPage.jsx":"36","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3TestPage\\animLines.jsx":"37"},{"size":524,"mtime":1614987125411,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":3794,"mtime":1615677613561,"results":"41","hashOfConfig":"39"},{"size":870,"mtime":1611414434756,"results":"42","hashOfConfig":"39"},{"size":537,"mtime":1611356491427,"results":"43","hashOfConfig":"39"},{"size":2168,"mtime":1613421429507,"results":"44","hashOfConfig":"39"},{"size":851,"mtime":1611685887737,"results":"45","hashOfConfig":"46"},{"size":371,"mtime":1611685887741,"results":"47","hashOfConfig":"46"},{"size":95,"mtime":1611685887737,"results":"48","hashOfConfig":"46"},{"size":2399,"mtime":1614629363501,"results":"49","hashOfConfig":"39"},{"size":1200,"mtime":1612820508679,"results":"50","hashOfConfig":"39"},{"size":518,"mtime":1612819271900,"results":"51","hashOfConfig":"39"},{"size":409,"mtime":1613296360927,"results":"52","hashOfConfig":"39"},{"size":312,"mtime":1612819271908,"results":"53","hashOfConfig":"39"},{"size":3739,"mtime":1613421366925,"results":"54","hashOfConfig":"39"},{"size":1622,"mtime":1615324764248,"results":"55","hashOfConfig":"39"},{"size":2276,"mtime":1614032271167,"results":"56","hashOfConfig":"39"},{"size":2184,"mtime":1613914707327,"results":"57","hashOfConfig":"39"},{"size":2813,"mtime":1614032271167,"results":"58","hashOfConfig":"39"},{"size":1640,"mtime":1618865450111,"results":"59","hashOfConfig":"39"},{"size":1153,"mtime":1618865504398,"results":"60","hashOfConfig":"39"},{"size":358,"mtime":1614987125403,"results":"61","hashOfConfig":"39"},{"size":2021,"mtime":1614987125403,"results":"62","hashOfConfig":"39"},{"size":1189,"mtime":1615324764232,"results":"63","hashOfConfig":"39"},{"size":546,"mtime":1615324764240,"results":"64","hashOfConfig":"39"},{"size":535,"mtime":1615324764248,"results":"65","hashOfConfig":"39"},{"size":907,"mtime":1615327966161,"results":"66","hashOfConfig":"39"},{"size":5608,"mtime":1616372162951,"results":"67","hashOfConfig":"39"},{"size":1049,"mtime":1615505637620,"results":"68","hashOfConfig":"39"},{"size":786,"mtime":1615507937716,"results":"69","hashOfConfig":"39"},{"size":386,"mtime":1616350326332,"results":"70","hashOfConfig":"39"},{"size":3392,"mtime":1615941477248,"results":"71","hashOfConfig":"39"},{"size":2433,"mtime":1615934555114,"results":"72","hashOfConfig":"39"},{"size":8300,"mtime":1615717354496,"results":"73","hashOfConfig":"39"},{"size":610,"mtime":1615941008949,"results":"74","hashOfConfig":"39"},{"size":1348,"mtime":1618874498131,"results":"75","hashOfConfig":"39"},{"size":768,"mtime":1618873076616,"results":"76","hashOfConfig":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"zolefo",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1csll0i",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"79"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"79"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"79"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"79"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"79"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":24,"source":"155","usedDeprecatedRules":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\index.js",[],["162","163"],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\reportWebVitals.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\App.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\playground.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\normal.jsx",["164","165"],"import react from \"react\"\r\nimport * as d3 from \"d3\"\r\nimport * as jstat from \"jstat\"\r\n\r\nfunction Normal(props) {\r\nlet ht = props.height\r\nlet wd = props.width\r\nconst line = d3.line()\r\n.x(d=>d.x)\r\n.y(d=>d.y)\r\n\r\nlet arr = []\r\nfor (let i = 0;i<wd;i++) {\r\n    arr.push({x:i, y:jstat.normal.sample(wd/2,40)})\r\n}\r\n\r\n\r\n    return (\r\n        <div>  \r\n        <p>{props.text}</p>\r\n        <svg\r\n        \r\n        >\r\n            <path className=\"normal-line\" d={line(arr)}/>\r\n        </svg>\r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default Normal","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\hookD3Component.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\board.jsx",[],["166","167"],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\square.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\knight.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\motionDiv.jsx",["168","169"],"import React, { useRef, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n{\r\n  /* just here to play about with basic ideas in framer motion */\r\n}\r\nconst Rotate = () => {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const constraintsRef = useRef();\r\n\r\n  const variant = {\r\n    active: {\r\n      rotate: 360,\r\n      scale: 1,\r\n      opacity: 1\r\n    },\r\n    inactive: {\r\n      rotate: 0,\r\n      scale: 1,\r\n      opacity: 0\r\n    }\r\n  };\r\n\r\n  const [dragColour, setDragColour] = useState({ div: \"white\", svg: \"blue\" });\r\n\r\n  return (\r\n    <div className=\"md-holder\">\r\n      <br />\r\n      <button\r\n        className=\"Button motion-button\"\r\n        onClick={() => setIsActive(!isActive)}\r\n      >\r\n        {isActive ? \"Drag it!\" : \"Find it!\"}\r\n      </button>\r\n      <motion.div\r\n        className=\"motionDiv\"\r\n        variants={variant}\r\n        animate={isActive ? \"active\" : \"inactive\"}\r\n      >\r\n        <div\r\n          className=\"constrainingDiv\"\r\n          ref={constraintsRef}\r\n          style={{\r\n            margin: \"10%\",\r\n            height: \"80%\",\r\n            width: \"80%\"\r\n          }}\r\n        >\r\n          <motion.div\r\n            style={{\r\n              left: 50,\r\n              width: 150,\r\n              height: 150,\r\n              borderRadius: 30,\r\n              backgroundColor: dragColour.div,\r\n              cursor: \"grab\",\r\n              alignItems: \"center\"\r\n            }}\r\n            drag\r\n            dragConstraints={constraintsRef}\r\n            dragElastic={0.5}\r\n            onDrag={() => {\r\n              setIsFinished(false);\r\n              setDragColour({ div: \"red\", svg: \"green\" });\r\n            }}\r\n            onDragEnd={() => {\r\n              setIsFinished(true);\r\n              setDragColour({ div: \"white\", svg: \"blue\" });\r\n\r\n              setTimeout((d) => {\r\n                setIsFinished(false);\r\n              }, 2000);\r\n            }}\r\n            whileTap={{ cursor: \"grabbing\" }}\r\n          >\r\n            <div>\r\n              <svg height=\"150\" width=\"150\">\r\n                <circle\r\n                  r=\"20\"\r\n                  transform=\"translate(75, 75)\"\r\n                  fill={dragColour.svg}\r\n                />\r\n              </svg>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rotate;\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3popUpdiv.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\functions.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\hoverDiv.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\names.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\styleD\\styledWithTailwind.jsx",["170"],"import styles from './styles.css'\r\nimport {useState} from 'react'\r\n\r\nfunction StyledDiv(props) {\r\nlet message = `a random number here: ${Math.random()}`\r\n\r\nconst [showModal , setShowModal] = useState(false)\r\n\r\nconst popUpThingy = (\r\n    <>\r\n          <div\r\n            className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\"\r\n            onClick={() => setShowModal(false)}\r\n          >\r\n            <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\r\n              {/*content*/}\r\n              <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\r\n                {/*header*/}\r\n                <div className=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\">\r\n                  <h3 className=\"text-2xl font-semibold\">\r\n                    Thanks for Clicking, you're a hero\r\n                  </h3>\r\n                  <button\r\n                    className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    <span className=\"bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none\">\r\n                      ×\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n                {/*body*/}\r\n                <div className=\"relative p-6 flex-auto\">\r\n                  <p className=\"my-4 text-gray-600 text-lg leading-relaxed\">\r\n                   Stop tyring to hit me and hit me! <br/>\r\n                   I know what you're tyring to do...<br/>\r\n                   I'm trying to free your mind.....\r\n                  </p>\r\n                </div>\r\n                {/*footer*/}\r\n                <div className=\"flex items-center justify-end p-6 border-t border-solid border-gray-300 rounded-b\">\r\n                  <button\r\n                    className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    className=\"bg-green-500 text-white active:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    Save Changes\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\r\n        </>\r\n  )\r\n\r\n\r\n    return (\r\n        <div className=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4\">\r\n  \r\n  <div>\r\n    <div className=\"text-xl font-medium text-black\">Neo!</div>\r\n    <p className=\"text-gray-500\">Green pill or red?!</p>\r\n    <p className=\"text-gray-500\">I would like you to {props.ridiculousMessage}</p>\r\n    <p className=\"text-gray-700\">{message}</p>\r\n  </div>\r\n  <button onClick={props.clickAction} className=\"btn btn-green\">\r\n  Green Button\r\n</button>\r\n<button onClick={()=> setShowModal(true)} className=\"btn btn-red\">\r\n  Show the popup thing\r\n</button>\r\n{showModal && popUpThingy}\r\n\r\n\r\n</div>\r\n    )\r\n}\r\n\r\nexport default StyledDiv","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\interactiveGraph.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\linegraph.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\barChart.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\graphs\\pieChart.jsx",["171","172"],"import * as d3 from \"d3\";\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\nconst PieChart = (props) => {\r\n  const d3Container = useRef(null);\r\n  const svgHeight = 200;\r\n  const svgWidth = 300;\r\n  let pieDataTimer;\r\n\r\n  useEffect(() => {\r\n    const svgC = d3.select(d3Container.current);\r\n    const newData = props.testInfo;\r\n\r\n    const pie = d3.pie().value(function (d) {\r\n      return d.cv;\r\n    });\r\n    const data_ready = pie(newData);\r\n\r\n    let arcFunc = d3.arc().innerRadius(0).outerRadius(90);\r\n\r\n    let pathData = [];\r\n    data_ready.forEach((d, i) => {\r\n      arcFunc.startAngle(d.startAngle).endAngle(d.endAngle);\r\n\r\n      let tempObj = arcFunc(d.cv);\r\n      pathData.push({\r\n        path: tempObj,\r\n        colour: d.data.colourNumber,\r\n        number: d.data.cv,\r\n        index: i\r\n      });\r\n    });\r\n\r\n    svgC.select(\".pathGroup\").remove();\r\n    //console.log(newData)\r\n    const update = svgC\r\n      .append(\"g\")\r\n      .attr(\"class\", \"pathGroup\")\r\n      .attr(\r\n        \"transform\",\r\n        \"translate(\" + svgHeight / 2 + \" \" + svgHeight / 2 + \")\"\r\n      )\r\n      .selectAll(\"path\")\r\n      .data(pathData);\r\n    /*\r\n      update.enter()\r\n      .append(\"path\")\r\n      .attr(\"class\", \"linePath\")\r\n      .attr(\"d\", lineFunc(lineData))\r\n      .style(\"stroke\", (d)=>{return d3.interpolateTurbo(d.lineColour)})\r\n    */\r\n\r\n    update\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", (d) => {\r\n        return d.path;\r\n      })\r\n      .attr(\"fill\", function (d) {\r\n        return d3.interpolateCool(d.colour);\r\n      })\r\n      .style(\"stroke\", \"black\")\r\n      .style(\"stroke-width\", \"1px\")\r\n      .on(\"mouseover\", (e, d) => {\r\n        if (pieDataTimer) {\r\n          window.clearTimeout(pieDataTimer);\r\n        }\r\n\r\n        let textTwo = \"Value: \" + d.number;\r\n        d3.select(\".textOne\").text(\"Data\");\r\n\r\n        d3.select(\".textTwo\").text(textTwo);\r\n\r\n        let textThree = \"Colour: \" + d3.interpolateCool(d.colour);\r\n\r\n        d3.select(\".textThree\").text(textThree);\r\n\r\n        let textFour = \"Index: \" + (d.index + 1);\r\n\r\n        d3.select(\".textFour\").text(textFour);\r\n      })\r\n      .on(\"mouseout\", () => {\r\n        pieDataTimer = window.setTimeout(() => {\r\n          d3.selectAll(\".pieText\").text(\"\");\r\n        }, 3500);\r\n      });\r\n\r\n    /* axes */\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"chartContainer\">\r\n      <br />\r\n      <svg\r\n        className=\"d3-component\"\r\n        width={svgHeight}\r\n        height={svgHeight}\r\n        ref={d3Container}\r\n      />\r\n      <div className=\"hoverData\">\r\n        <br />\r\n        <p className=\"textOne pieText bold\"></p>\r\n        <p className=\"textTwo pieText \"></p>\r\n        <p className=\"textThree pieText \"></p>\r\n        <p className=\"textFour pieText \"></p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\routing.js",["173"],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\routerNavBar.jsx",["174"],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3div.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\navbar\\navbar.jsx",["175","176","177","178"],"import * as d3 from \"d3\";\r\nimport styles from \"./nav.css\";\r\nimport { useState } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\n\r\nfunction Navbar(props) {\r\n  const lineFunc = d3\r\n    .line()\r\n    .x((d) => d.x)\r\n    .y((d) => d.y);\r\n\r\n  const barOne = [\r\n    { x: 0, y: 2 },\r\n    { x: 20, y: 2 }\r\n  ];\r\n\r\n  const links = [\r\n    { name: \"home\", url: \"#home\", type: \"text\" },\r\n    { name: \"about\", url: \"#about\", type: \"text\" },\r\n    { name: \"contact\", url: \"#contact\", type: \"text\" },\r\n    { name: \"burger\", url: null, type: \"svg\" }\r\n  ];\r\n\r\n  const barOnePath = lineFunc(barOne);\r\n\r\n  console.log(barOnePath);\r\n\r\n  const strokeStyle = {\r\n    stroke: \"black\",\r\n    strokeWidth: \"2px\",\r\n    fill: \"none\"\r\n  };\r\n\r\n  const [menuActive, setMenuActive] = useState(false);\r\n\r\n  function showMenu() {\r\n    if (!menuActive) {\r\n      setMenuActive(true);\r\n    } else {\r\n      setMenuActive(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={menuActive ? \"topnav navresponsive\" : \"topnav\"}\r\n        id=\"myTopnav\"\r\n      >\r\n        <a\r\n          className={menuActive ? \" navitem clicked\" : \"navitem\"}\r\n          href=\"#home\"\r\n          class=\"active\"\r\n        >\r\n          Home\r\n        </a>\r\n        <a className={menuActive ? \" navitem clicked\" : \"navitem\"} href=\"#news\">\r\n          News\r\n        </a>\r\n        <a\r\n          className={menuActive ? \" navitem clicked\" : \"navitem\"}\r\n          href=\"#contact\"\r\n        >\r\n          Contact\r\n        </a>\r\n        <a\r\n          className={menuActive ? \" navitem clicked\" : \"navitem\"}\r\n          href=\"#about\"\r\n        >\r\n          About\r\n        </a>\r\n      </div>\r\n      <div className=\"navburger navitem\" onClick={() => showMenu()}>\r\n        <svg height=\"24\" width=\"20\">\r\n          <path d=\"M1,6L19,6\" style={strokeStyle}></path>\r\n          <path d=\"M1,12L19,12\" style={strokeStyle}></path>\r\n          <path d=\"M1,18L19,18\" style={strokeStyle}></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\about\\about.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\contact\\contact.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\rainbowCols.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\contact\\contactInfo.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squares.jsx",["179","180","181"],"import { useState } from \"react\";\r\nimport GridHolder from \"./gridHolder.jsx\"\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nfunction Squares() {\r\n \r\n  const rNum = 20;\r\n  const num = rNum * rNum * 2;\r\n\r\n  /*\r\nfor now: \r\ngrid is hardcoded 20 rows by 40 columns.\r\nto change:\r\nmap method of color inputs\r\ngrid:\r\nthis needs to only rerender the aspects that are being controlled, \r\nnot call the whole boohoo function just for a recolor. maybe the boohoo\r\ncan be inside a useEffect, and only run when specifc controls are changed.\r\n*/\r\nconst [dV, setDV] = useState(\r\n        [{name: \"rows\", value: 20, step: 1, id: \"id_rw\"},\r\n        {name: \"cols\", value: 40, step: 1, id: \"id_cl\"},\r\n        {name: \"deviance\", value: 2, step: 1, id: \"id_dv\"},\r\n        {name: \"texture\", value: 0, step: 1, id: \"id_tx\"}]\r\n)\r\n\r\nconst rex = Math.floor(Math.random()*dV[0].value)\r\nconst rey = Math.floor(Math.random()*dV[1].value)\r\n\r\nconst [location, setLocation] = useState([rex, rey]);\r\n\r\n  function newLocation() {\r\n    let nX = Math.floor(Math.random()*dV[0].value)\r\n    let nY = Math.floor(Math.random()*dV[1].value)\r\n    setLocation([nX, nY]);\r\n  }\r\n \r\n\r\n  function controlHandler(e){\r\n// redo dV to be an array of objects for each input.\r\n// then .map them out.\r\n// use steps and ids (like in other components to target the state change)\r\n\r\nlet obj = dV.find((x) => x.id === e.target.id);\r\n    let index = dV.indexOf(obj);\r\n    let dt = [...dV];\r\n    dt[index].value = e.target.value\r\n\r\n    if(e.target.id == \"id_cl\") {\r\n      \r\n        let string = (2 + e.target.value*24) + \"px\"\r\n        setDivWidth(string)\r\n    }\r\n\r\n    setDV(dt);\r\n  }\r\n\r\n  let startingWidth = (2 + dV[1].value*24) + \"px\"\r\n\r\n  const [divWidth, setDivWidth] = useState(2 + dV[1].value*24)\r\n//the above needs to be passed to the div as a prop\r\n\r\n/* control panel */\r\n\r\n  const controlPanel = dV.map((item)=>{\r\n      let kee = \"box_\" + item.name\r\n  \r\n  return (\r\n<div\r\nkey={kee}\r\nstyle={{\r\n    paddingLeft: \"8px\",\r\n    paddingRight: \"8px\",\r\n}}>\r\n<p  className=\"dataTextDark\">{item.name}</p>\r\n<input\r\n        className=\"graphInputDark\"\r\n        id={item.id}\r\n        onChange={(e) => controlHandler(e)}\r\n        type=\"number\"\r\n        step={item.step}\r\n        value={item.value}\r\n      ></input>\r\n\r\n</div>\r\n  )\r\n\r\n  })\r\n\r\n\r\n  const startingColObj = [\r\n    {id: \"colour_0\", value: hslColour(), picker: false},\r\n    {id: \"colour_1\", value: hslColour(), picker: false},\r\n    {id: \"colour_2\", value: hslColour(), picker: false},\r\n    {id: \"colour_3\", value: hslColour(), picker: false},\r\n    {id: \"colour_4\", value: hslColour(), picker: false},\r\n    {id: \"colour_5\", value: hslColour(), picker: false},\r\n    {id: \"colour_6\", value: hslColour(), picker: false},\r\n    {id: \"colour_7\", value: hslColour(), picker: false},\r\n    {id: \"colour_8\", value: hslColour(), picker: false},\r\n    {id: \"colour_9\", value: hslColour(), picker: false}\r\n  ]\r\n\r\n  const [colourArray, setColourArray] = useState(startingColObj)\r\n  const [showPicker, setShowPicker] = useState(false)\r\n  const [pickerVal, setPickerVal] = useState(hslColour())\r\n\r\n\r\n  function handleColourChange(event) {\r\n\r\nlet thisID = event.target.id\r\nconsole.log(thisID)\r\nlet arr = colourArray\r\nconsole.log(arr)\r\n\r\nfor (let i = 0; i<arr.length; i++) {\r\n  if (arr[i].id === thisID) {\r\n    setPickerVal(arr[i].value)\r\n    arr[i].picker = true\r\n    }\r\n}\r\nsetShowPicker(true)\r\nsetColourArray(arr)\r\n  }\r\n\r\n  function pickerColChange(event) {\r\n   \r\n    setPickerVal(event.hex)\r\n    let arr = colourArray\r\n    for (let i = 0; i<arr.length; i++) {\r\n      if (arr[i].picker) {\r\n        console.log(\"foundit\")\r\n       arr[i].value = event.hex}\r\n    }\r\n    setColourArray(arr)\r\n\r\n  }\r\n\r\n  function closePicker() {\r\nsetShowPicker(false)\r\nlet arr = colourArray\r\nfor (let i = 0; i<arr.length; i++) {\r\n  if (arr[i].picker) {\r\n  \r\n   arr[i].picker = false}\r\n}\r\n\r\nsetColourArray(arr)\r\n  }\r\n\r\n\r\n  const colourInputs = colourArray.map((x,i)=>{\r\n\r\n      return (\r\n        <div \r\n        key={x.id}\r\n        className=\"input-holder\">\r\n            <button \r\n  onClick={(e)=> handleColourChange(e)}\r\n  id={x.id}\r\n  style={{\r\n    width: \"20px\",\r\n    height: \"30px\",\r\n    backgroundColor: colourArray[i].value,\r\nmargin: \"10px\"\r\n  }}></button>\r\n        </div>\r\n    )\r\n  })\r\n\r\n\r\n  return (\r\n      <div>\r\n        \r\n          <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            margin: \"20px\",\r\n            justifyContent: \"center\"}}>\r\n{controlPanel} \r\n          </div>\r\n          <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            margin: \"20px\",\r\n            justifyContent: \"center\"}}>\r\n{colourInputs}\r\n             \r\n          </div>\r\n          {showPicker && <div style={{\r\n            position: \"fixed\",\r\n            top: \"310px\",\r\n            left: \"50%\",\r\n            margin: \"-100px\"\r\n\r\n          }}> <button\r\n          onClick={()=>{closePicker()}}>xxxxx</button> <SketchPicker \r\n          color={pickerVal}\r\n          width={200}\r\n          onChangeComplete={(e)=> pickerColChange(e) }/></div>}\r\n         \r\n   \r\n    <GridHolder \r\n    data={dV}\r\n    focus={location}\r\n    width={divWidth}\r\n    />\r\n    <button\r\n             style={{\r\n                 padding: \"2px\"\r\n             }}\r\n             onClick={newLocation}\r\n             >New Location Please</button>\r\n   \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction hslColour(){\r\n\r\n  const h = Math.random()*360\r\n  const s = Math.random()*100 + \"%\"\r\n  const l = Math.random()*100 + \"%\"\r\n\r\n\r\n  const colour = \"hsl(\" + h +\", \" + s + \", \" + l +\")\"\r\n\r\n\r\n  return colour\r\n}\r\n\r\nexport default Squares;\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squaredata.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\squareGrid.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\squares\\gridHolder.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\maze.jsx",["182"],"import { useState, useRef } from \"react\";\r\nimport MazeGrid from \"./mazeGrid.jsx\";\r\nimport \"./mazeStyle.css\";\r\nimport useWindowDimensions from \"../windowSizeHook.js\"\r\nimport { useReactToPrint } from 'react-to-print';\r\n\r\n\r\nfunction Maze() {\r\n  const handleVersionUpdate = () => {\r\n    let current = subText.version + 1;\r\n\r\n    setSubText({\r\n      cells: size,\r\n      version: current\r\n    });\r\n  };\r\n\r\n  function handleNumber(val) {\r\n    setSize(val);\r\n  }\r\n\r\n  const [size, setSize] = useState(8);\r\n\r\n  const [svgSize, setSvgSize] = useState(500)\r\n\r\n  let winWid = useWindowDimensions()\r\n\r\nif (winWid < 499) {\r\n   setTimeout(()=>{\r\n       setSvgSize(360)\r\n   },1000)\r\n}else { if(winWid > 750) {\r\n    setTimeout(()=>{\r\n        setSvgSize(600)\r\n    },1000)\r\n}else{\r\n    setTimeout(()=>{\r\n        setSvgSize(500)\r\n    },1000)\r\n}\r\n}\r\n\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: ()=> componentRef.current,\r\n    })\r\n\r\n\r\n\r\n  const [subText, setSubText] = useState({\r\n    cells: size,\r\n    version: 0\r\n  });\r\n\r\n  return (\r\n    <div className=\"mazeTopContainer\">\r\n        <h1>Maze Generator</h1>\r\n      <div className=\"mazeControl\">\r\n        <p> Enter number of cells here:\r\n\r\n        <input\r\n          className=\"numberInput\"\r\n          type=\"number\"\r\n          step=\"1\"\r\n          value={size}\r\n          min=\"2\"\r\n          max=\"50\"\r\n          onChange={(e) => {\r\n            handleNumber(e.target.value);\r\n          }}\r\n        /></p>\r\n        <button\r\n          className=\"enterButton\"\r\n          onClick={() => {\r\n            handleVersionUpdate();\r\n          }}\r\n        >\r\n          new Maze please\r\n          </button>\r\n        <button \r\n        onClick={handlePrint} \r\n        className=\"printButton\"\r\n        >print this maze</button>\r\n      </div>\r\n\r\n      <div className=\"Maze\"\r\n      ref={componentRef}>\r\n        <MazeGrid\r\n          cellNumber={subText.cells}\r\n          svgSize={svgSize}\r\n          version={subText.version}\r\n        />\r\n    \r\n        <div  className=\"creditBit\"\r\n        style={{width: svgSize}}>\r\n        <p\r\n        >maze created at <a href=\"/maze\">harrywatton.com</a></p></div>\r\n      </div>\r\n      <div className=\"mazeInfo\"\r\n      style={{\r\n          width: svgSize\r\n      }}>\r\n         \r\n        <h2>More info:</h2>\r\n        <br/>\r\n        <p>\r\n          The maze is limited to 50 x 50 cells as it can be very slow to render\r\n          in a browser as it gets larger, and it doesn't read very well either with too many cells.\r\n        </p>\r\n        <br/>\r\n        <p>\r\n          It is created programmatically each time using a Kruskal's Algorithm\r\n          based method. Read more <a href=\"https://en.wikipedia.org/wiki/Maze_generation_algorithm\" target=\"_blank\">here.</a>\r\n        </p>\r\n        <br/>\r\n        <p>\r\n          One of the positives of this method is the randomised nature of the\r\n          paths layout, which makes it look quite hectic at first glance. A potential drawback however, is that it tends to create lots of little dead-ends which can be easy to navigate around when solving. \r\n        </p>\r\n        <br/>\r\n        <p>The mazes created on this page are generated each time and are free to use. If you'd like to borrow/improve/adapt my algorithm for your own project, please get in touch via my contact page. Thanks!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Maze;\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\mazeGrid.jsx",["183"],"import MazeData from \"./mazeFunction.js\"\r\nimport * as d3 from \"d3\"\r\n\r\nimport { useRef, useEffect } from \"react\"\r\n\r\nfunction MazeGrid (props) {\r\n\r\n    const mazeContainer = useRef(null);\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n\r\n        const data = MazeData(props.cellNumber, props.svgSize)\r\n\r\n        const svgC = d3.select(mazeContainer.current);\r\n\r\n        svgC.selectAll(\".mazeLine\").remove()\r\n\r\nfunction pathWidth(size) {\r\n    let wd \r\n    if (size<100) {wd = \"1px\"}\r\n    if (size<40) {wd = \"2px\"}\r\n    if (size<30) {wd = \"3px\"}\r\n    if (size<20) {wd = \"5px\"}\r\n\r\n    return wd\r\n\r\n}\r\n\r\nif (props.cellNumber<=50 && props.cellNumber > 0) {\r\n\r\n        svgC.append(\"path\")\r\n        .attr(\"class\", \"mazeLine\")\r\n        .attr(\"d\", data.wallOne)\r\n        .attr(\"fill\", \"none\")\r\n        .style(\"stroke-width\", pathWidth(props.cellNumber))\r\n        .style(\"stroke\", \"black\")\r\n\r\n        svgC.append(\"path\")\r\n        .attr(\"class\", \"mazeLine\")\r\n        .attr(\"d\", data.wallTwo)\r\n        .attr(\"fill\", \"none\")\r\n        .style(\"stroke-width\", pathWidth(props.cellNumber))\r\n        .style(\"stroke\", \"black\")\r\n\r\n        for (let i=0; i<data.interiorWalls.length; i++) {\r\n            svgC.append(\"path\")\r\n            .attr(\"class\", \"mazeLine\")\r\n        .attr(\"d\", data.interiorWalls[i].lineData)\r\n        .attr(\"fill\", \"none\")\r\n        .style(\"stroke-width\", pathWidth(props.cellNumber))\r\n        .style(\"stroke\", \"black\")\r\n        }\r\n\r\n        for (let i=0; i<data.circleData.length; i++) {\r\n            svgC.append(\"circle\")\r\n            .attr(\"class\", \"mazeLine path-junctions\")\r\n        .attr(\"cx\", data.circleData[i].cx)\r\n        .attr(\"cy\", data.circleData[i].cy)\r\n        .attr(\"r\", ()=>{\r\n            let str = pathWidth(props.cellNumber)\r\n            return 0.85*(parseInt(str.substring(0,1), 10)/2)\r\n        })\r\n        .attr(\"fill\", \"black\")\r\n        .style(\"stroke\", \"none\")\r\n        }\r\n    }\r\n\r\n\r\n       \r\n      }, [props.cellNumber, props.version]);\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"container\"\r\n        style={{\r\n            width: props.svgSize\r\n        }}>\r\n      <svg\r\n        className=\"d3-component\"\r\n        width={props.svgSize}\r\n        height={props.svgSize}\r\n        ref={mazeContainer}\r\n      />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MazeGrid","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\maze\\mazeFunction.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207"],"import * as d3 from \"d3\"\r\n/* notes:\r\nthrash out a function\r\naccept */\r\nfunction mazeData(gridSize, pixelSize) {\r\n\r\n    const ht = pixelSize\r\n    const rows = gridSize\r\n    const cols = rows\r\n\r\n\r\n//this might be in mazegrid too.\r\nconst lineScale = d3.scaleLinear()\r\n.range([10, (ht - 10)]) \r\n.domain([0,rows])\r\n\r\nconst lineFunc = d3.line()\r\n.x(d=> lineScale(d.x))\r\n.y(d=> lineScale(d.y))\r\n\r\n//make some circles to cover the joins of paths with width > 1px\r\nlet circlePositions = []\r\n\r\nfor (let i=0;i<rows+1;i++) {\r\n    for (let j=0;j<rows+1;j++) {\r\ncirclePositions.push({cx:lineScale(i), cy:lineScale(j)})\r\n\r\n    }\r\n}\r\n\r\n\r\n/* the next bit, make the two parts of the outside walls. */\r\n/*maybe this  is exported separately , or an object:\r\n{\r\n    wallOne: <path>,\r\n    wallTwo: <path,\r\n    interiorWalls, <path Array>\r\n\r\n    or just export the arrays, and do all the drawing and d3.line conversion in mazegrid\r\n\r\n}\r\n*/\r\nlet outsideLines = [\r\n    {x: 0, y: 0},\r\n    {x: 0, y: rows},\r\n    {x: rows -1, y: rows}\r\n]\r\nlet outsidePaths = lineFunc(outsideLines) \r\n\r\n\r\nlet outsideLines2 = [\r\n    {x: 1, y: 0},\r\n    {x: rows, y: 0},\r\n    {x: rows, y: rows}\r\n]\r\n\r\nlet outsidePaths2 = lineFunc(outsideLines2) \r\n\r\n\r\n\r\n//right- start wrangling...\r\n //make an array of all maze positions\r\n\r\n let mazePositions = []\r\n let z = 0\r\n let mazeMap = []\r\n\r\n for (let i = 0; i < rows; i++) {\r\n     let mapRow = []\r\n    for (let j = 0; j < cols; j++) {\r\n        mazePositions.push({\r\n            row: i,\r\n            col: j,\r\n            inMaze: false,\r\n            mazeRef: null,\r\n            id_no: z\r\n        })\r\n        \r\n\r\n        mapRow.push({\r\n         row: i,\r\n         col: j,\r\n         inMaze: false,\r\n         mazeRef: null,\r\n         id_no: z\r\n        })\r\n        z++\r\n    }\r\n    mazeMap.push(mapRow)\r\n     \r\n } //for - create mazepositions\r\n\r\n let wallPositions = []\r\n\r\n //add horizontal walls first\r\n\r\n for (let i = 0; i < rows-1; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n\r\n     let path = [\r\n         {x: j, y: i+1},\r\n         {x: j+1, y: i+1}\r\n     ]\r\n\r\n     let thisPath = lineFunc(path)\r\n     \r\n        wallPositions.push({\r\n            orientation: \"horizontal\",\r\n            cellAbove: [i, j],\r\n            cellBelow: [i+1, j],\r\n            gone: false,\r\n            lineData: thisPath\r\n        })\r\n        \r\n    } //j\r\n     \r\n } // i\r\n\r\n //add vertical walls next\r\n\r\n for (let i = 0; i < rows; i++) {\r\n     \r\n     for (let j = 0; j < cols-1; j++) {\r\n\r\n\r\n         let path = [\r\n             {x: j+1, y: i},\r\n             {x: j+1, y: i+1}\r\n         ]\r\n \r\n         let thisPath = lineFunc(path)\r\n\r\n         wallPositions.push({\r\n             orientation: \"vertical\",\r\n             cellLeft: [i, j],\r\n             cellRight: [i,j+1],\r\n             gone: false,\r\n             lineData: thisPath\r\n         })\r\n         \r\n     } //j\r\n      \r\n  } // i\r\n\r\n\r\n  //////////////// VARIABLES /////\r\n  let wP = shuffle(wallPositions)\r\n  let mazeRefNumber = 0\r\n\r\n\r\n\r\n  \r\n  //////////// MASHWALLS IS THE MAIN LOOP TO ASCERTAIN MAIN STRUCTURE\r\n  function mashWalls(arrayIn) {\r\n  \r\n      let array = arrayIn\r\n      let aL = array.length\r\n  \r\n  \r\n  for (let i = 0; i < aL; i++) { //BIG LOOP\r\n  \r\n  \r\n      let obj = array[i]\r\n  \r\n  if (obj.orientation !== \"vertical\") {\r\n      //horizontal wall\r\n      \r\n  \r\n      let cellOne = mazeMap[obj.cellAbove[0]] [obj.cellAbove[1]]\r\n      let cellTwo = mazeMap[obj.cellBelow[0]] [obj.cellBelow[1]]\r\n  \r\n      \r\n      if (cellOne.inMaze) {\r\n          //c1 in maze\r\n      if (cellTwo.inMaze) {\r\n          //c2 also in maze\r\n          //do nothing\r\n         \r\n      }else{\r\n                //c1 in maze, c2 not in maze\r\n          mazeMap[obj.cellBelow[0]] [obj.cellBelow[1]].inMaze = true\r\n          mazeMap[obj.cellBelow[0]] [obj.cellBelow[1]].mazeRef = cellOne.mazeRef\r\n          array[i].gone = true\r\n      }\r\n      \r\n      }else{\r\n          //c1 not in maze \r\n          if (cellTwo.inMaze) {\r\n              //c1 not in maze,  c2 in maze\r\n       \r\n  \r\n              mazeMap[obj.cellAbove[0]] [obj.cellAbove[1]].inMaze = true\r\n              mazeMap[obj.cellAbove[0]] [obj.cellAbove[1]].mazeRef = cellTwo.mazeRef\r\n              array[i].gone = true\r\n      \r\n          }else{\r\n              //neither in maze\r\n  \r\n            \r\n  \r\n              mazeMap[obj.cellAbove[0]] [obj.cellAbove[1]].inMaze = true\r\n              mazeMap[obj.cellBelow[0]] [obj.cellBelow[1]].inMaze = true\r\n      \r\n              mazeMap[obj.cellAbove[0]] [obj.cellAbove[1]].mazeRef = mazeRefNumber\r\n              mazeMap[obj.cellBelow[0]] [obj.cellBelow[1]].mazeRef = mazeRefNumber\r\n  \r\n              array[i].gone = true\r\n      \r\n              mazeRefNumber++\r\n      \r\n      \r\n          }\r\n      }\r\n          \r\n      \r\n      }else{\r\n      //vertical wall\r\n    \r\n      \r\n      let cellOne = mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]]\r\n      let cellTwo = mazeMap[obj.cellRight[0]] [obj.cellRight[1]]\r\n    \r\n      \r\n      if (cellOne.inMaze) {\r\n          //c1 in maze\r\n      if (cellTwo.inMaze) {\r\n          //c2 also in maze\r\n          //do nothing\r\n        \r\n      }else{\r\n          //c1 in maze, c2 not in maze\r\n        \r\n  \r\n          mazeMap[obj.cellRight[0]] [obj.cellRight[1]].inMaze = true\r\n          mazeMap[obj.cellRight[0]] [obj.cellRight[1]].mazeRef = cellOne.mazeRef\r\n          array[i].gone = true\r\n      }\r\n      \r\n      }else{\r\n          //c1 not in maze \r\n         \r\n          if (cellTwo.inMaze) {\r\n              //c1 not in maze,  c2 in maze\r\n              mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]].inMaze = true\r\n              mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]].mazeRef = cellTwo.mazeRef\r\n              array[i].gone = true\r\n      \r\n          }else{\r\n     \r\n  \r\n              //neither in maze\r\n              mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]].inMaze = true\r\n              mazeMap[obj.cellRight[0]] [obj.cellRight[1]].inMaze = true\r\n      \r\n              mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]].mazeRef = mazeRefNumber\r\n              mazeMap[obj.cellRight[0]] [obj.cellRight[1]].mazeRef = mazeRefNumber\r\n  \r\n              array[i].gone = true\r\n      \r\n              mazeRefNumber++\r\n      \r\n      \r\n          }\r\n      }\r\n      \r\n      }\r\n  } //bigLoop\r\n  \r\n  return array\r\n  }\r\n\r\n  /////// CALL MASHWALLS  ///////\r\n  let test = mashWalls(wP)\r\n\r\n  const tL = test.length\r\n\r\n  /********* CYCLE THROUGH SECTIONS AND JOIN TO FORM THE MAZE*************/\r\n\r\n  for (let i =0;i<tL;i++) {\r\n\r\n    if (test[i].gone !== true) {\r\n\r\n    \r\n    let obj = test[i]\r\n\r\nif (obj.orientation !== \"vertical\") {\r\n    //horizontal\r\n    let cellOne = mazeMap[obj.cellAbove[0]]  [obj.cellAbove[1]]\r\n    let cellTwo = mazeMap[obj.cellBelow[0]]  [obj.cellBelow[1]]\r\n    if (cellOne.mazeRef !== cellTwo.mazeRef) {\r\n        let ext = d3.extent([cellOne.mazeRef ,cellTwo.mazeRef])\r\n        let lo = ext[0]\r\n        let hi = ext[1]\r\n\r\n\r\n        for (let a=0;a<rows;a++) {\r\n            for (let b=0;b<cols;b++) {\r\n                if(mazeMap[a][b].mazeRef === hi) {\r\n                    mazeMap[a][b].mazeRef = lo\r\n                }\r\n            }\r\n        }\r\n\r\n        test[i].gone = true\r\n\r\n    }\r\n\r\n\r\n\r\n}else{\r\n    //vertical\r\n    let cellOne = mazeMap[obj.cellLeft[0]] [obj.cellLeft[1]]\r\n    let cellTwo = mazeMap[obj.cellRight[0]] [obj.cellRight[1]]\r\n\r\n    if (cellOne.mazeRef !== cellTwo.mazeRef) {\r\n        let ext = d3.extent([cellOne.mazeRef ,cellTwo.mazeRef])\r\n        let lo = ext[0]\r\n        let hi = ext[1]\r\n\r\n\r\n        for (let a=0;a<rows;a++) {\r\n            for (let b=0;b<cols;b++) {\r\n                if(mazeMap[a][b].mazeRef === hi) {\r\n                    mazeMap[a][b].mazeRef = lo\r\n                }\r\n            }\r\n        }\r\n        test[i].gone = true\r\n    }\r\n}\r\n}\r\n\r\n\r\n}\r\n//}\r\n\r\n\r\n//**************cycle ends **********************/\r\n\r\nlet whatsLeft = test.filter(function(d) {\r\n    return d.gone !== true\r\n})\r\n\r\nreturn ({\r\n    interiorWalls: whatsLeft,\r\n    wallOne: outsidePaths,\r\n    wallTwo: outsidePaths2,\r\ncircleData: circlePositions})\r\n}\r\n\r\n\r\n\r\nfunction shuffle(arrayIn) {\r\n\r\n    let returnArray = []\r\n    let k = arrayIn.length\r\n\r\n    for (let i = 0; i < k; i++) {\r\n       let index = Math.floor(Math.random()*arrayIn.length)\r\n        let element = arrayIn.splice(index,1)\r\n        returnArray.push(element[0])\r\n    }\r\n\r\nreturn returnArray\r\n}\r\n\r\nexport default mazeData\r\n\r\n\r\n","C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\windowSizeHook.js",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3TestPage\\d3TestPage.jsx",[],"C:\\Users\\harry\\projects\\react\\playabout-app\\src\\components\\d3TestPage\\animLines.jsx",[],{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":1,"column":8,"nodeType":"214","messageId":"215","endLine":1,"endColumn":13},{"ruleId":"212","severity":1,"message":"216","line":6,"column":5,"nodeType":"214","messageId":"215","endLine":6,"endColumn":7},{"ruleId":"208","replacedBy":"217"},{"ruleId":"210","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":4,"column":1,"nodeType":"221","messageId":"222","endLine":6,"endColumn":2},{"ruleId":"212","severity":1,"message":"223","line":9,"column":10,"nodeType":"214","messageId":"215","endLine":9,"endColumn":20},{"ruleId":"212","severity":1,"message":"224","line":1,"column":8,"nodeType":"214","messageId":"215","endLine":1,"endColumn":14},{"ruleId":"212","severity":1,"message":"225","line":7,"column":9,"nodeType":"214","messageId":"215","endLine":7,"endColumn":17},{"ruleId":"226","severity":1,"message":"227","line":83,"column":24,"nodeType":"228","endLine":85,"endColumn":17},{"ruleId":"212","severity":1,"message":"229","line":13,"column":21,"nodeType":"214","messageId":"215","endLine":13,"endColumn":29},{"ruleId":"212","severity":1,"message":"224","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":14},{"ruleId":"212","severity":1,"message":"224","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":14},{"ruleId":"212","severity":1,"message":"230","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":25},{"ruleId":"212","severity":1,"message":"231","line":4,"column":27,"nodeType":"214","messageId":"215","endLine":4,"endColumn":33},{"ruleId":"212","severity":1,"message":"232","line":17,"column":9,"nodeType":"214","messageId":"215","endLine":17,"endColumn":14},{"ruleId":"212","severity":1,"message":"233","line":9,"column":9,"nodeType":"214","messageId":"215","endLine":9,"endColumn":12},{"ruleId":"234","severity":1,"message":"235","line":50,"column":20,"nodeType":"236","messageId":"237","endLine":50,"endColumn":22},{"ruleId":"212","severity":1,"message":"238","line":59,"column":7,"nodeType":"214","messageId":"215","endLine":59,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":114,"column":35,"nodeType":"241","endLine":114,"endColumn":117},{"ruleId":"226","severity":1,"message":"242","line":72,"column":10,"nodeType":"243","endLine":72,"endColumn":43,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":169,"column":21,"nodeType":"247","messageId":"248","endLine":169,"endColumn":65,"fix":"249"},{"ruleId":"245","severity":1,"message":"250","line":170,"column":21,"nodeType":"247","messageId":"248","endLine":170,"endColumn":65,"fix":"251"},{"ruleId":"245","severity":1,"message":"250","line":181,"column":11,"nodeType":"247","messageId":"248","endLine":181,"endColumn":55,"fix":"252"},{"ruleId":"245","severity":1,"message":"250","line":182,"column":11,"nodeType":"247","messageId":"248","endLine":182,"endColumn":55,"fix":"253"},{"ruleId":"245","severity":1,"message":"246","line":192,"column":15,"nodeType":"247","messageId":"248","endLine":192,"endColumn":59,"fix":"254"},{"ruleId":"245","severity":1,"message":"246","line":193,"column":15,"nodeType":"247","messageId":"248","endLine":193,"endColumn":59,"fix":"255"},{"ruleId":"245","severity":1,"message":"246","line":201,"column":15,"nodeType":"247","messageId":"248","endLine":201,"endColumn":59,"fix":"256"},{"ruleId":"245","severity":1,"message":"250","line":202,"column":15,"nodeType":"247","messageId":"248","endLine":202,"endColumn":59,"fix":"257"},{"ruleId":"245","severity":1,"message":"246","line":204,"column":15,"nodeType":"247","messageId":"248","endLine":204,"endColumn":59,"fix":"258"},{"ruleId":"245","severity":1,"message":"250","line":205,"column":15,"nodeType":"247","messageId":"248","endLine":205,"endColumn":59,"fix":"259"},{"ruleId":"245","severity":1,"message":"260","line":220,"column":21,"nodeType":"247","messageId":"248","endLine":220,"endColumn":63,"fix":"261"},{"ruleId":"245","severity":1,"message":"262","line":221,"column":21,"nodeType":"247","messageId":"248","endLine":221,"endColumn":65,"fix":"263"},{"ruleId":"245","severity":1,"message":"262","line":234,"column":11,"nodeType":"247","messageId":"248","endLine":234,"endColumn":55,"fix":"264"},{"ruleId":"245","severity":1,"message":"262","line":235,"column":11,"nodeType":"247","messageId":"248","endLine":235,"endColumn":55,"fix":"265"},{"ruleId":"245","severity":1,"message":"260","line":244,"column":15,"nodeType":"247","messageId":"248","endLine":244,"endColumn":57,"fix":"266"},{"ruleId":"245","severity":1,"message":"260","line":245,"column":15,"nodeType":"247","messageId":"248","endLine":245,"endColumn":57,"fix":"267"},{"ruleId":"245","severity":1,"message":"260","line":252,"column":15,"nodeType":"247","messageId":"248","endLine":252,"endColumn":57,"fix":"268"},{"ruleId":"245","severity":1,"message":"262","line":253,"column":15,"nodeType":"247","messageId":"248","endLine":253,"endColumn":59,"fix":"269"},{"ruleId":"245","severity":1,"message":"260","line":255,"column":15,"nodeType":"247","messageId":"248","endLine":255,"endColumn":57,"fix":"270"},{"ruleId":"245","severity":1,"message":"262","line":256,"column":15,"nodeType":"247","messageId":"248","endLine":256,"endColumn":59,"fix":"271"},{"ruleId":"245","severity":1,"message":"246","line":288,"column":19,"nodeType":"247","messageId":"248","endLine":288,"endColumn":64,"fix":"272"},{"ruleId":"245","severity":1,"message":"250","line":289,"column":19,"nodeType":"247","messageId":"248","endLine":289,"endColumn":64,"fix":"273"},{"ruleId":"245","severity":1,"message":"260","line":312,"column":19,"nodeType":"247","messageId":"248","endLine":312,"endColumn":61,"fix":"274"},{"ruleId":"245","severity":1,"message":"262","line":313,"column":19,"nodeType":"247","messageId":"248","endLine":313,"endColumn":63,"fix":"275"},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'ht' is assigned a value but never used.",["276"],["277"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'isFinished' is assigned a value but never used.","'styles' is defined but never used.","'svgWidth' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'pieDataTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'setd3div' is assigned a value but never used.","'AnimatePresence' is defined but never used.","'motion' is defined but never used.","'links' is assigned a value but never used.","'num' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'startingWidth' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props.svgSize'. Either include it or remove the dependency array.","ArrayExpression",["278"],"no-whitespace-before-property","Unexpected whitespace before property obj.cellAbove[1].","MemberExpression","unexpectedWhitespace",{"range":"279","text":"280"},"Unexpected whitespace before property obj.cellBelow[1].",{"range":"281","text":"280"},{"range":"282","text":"280"},{"range":"283","text":"280"},{"range":"284","text":"280"},{"range":"285","text":"280"},{"range":"286","text":"280"},{"range":"287","text":"280"},{"range":"288","text":"280"},{"range":"289","text":"280"},"Unexpected whitespace before property obj.cellLeft[1].",{"range":"290","text":"280"},"Unexpected whitespace before property obj.cellRight[1].",{"range":"291","text":"280"},{"range":"292","text":"280"},{"range":"293","text":"280"},{"range":"294","text":"280"},{"range":"295","text":"280"},{"range":"296","text":"280"},{"range":"297","text":"280"},{"range":"298","text":"280"},{"range":"299","text":"280"},{"range":"300","text":"280"},{"range":"301","text":"280"},{"range":"302","text":"280"},{"range":"303","text":"280"},"no-global-assign","no-unsafe-negation",{"desc":"304","fix":"305"},[3333,3334],"",[3399,3400],[3673,3674],[3743,3744],[4012,4013],[4086,4087],[4289,4290],[4363,4364],[4445,4446],[4529,4530],[4806,4807],[4871,4872],[5154,5155],[5224,5225],[5490,5491],[5562,5563],[5752,5753],[5825,5826],[5906,5907],[5989,5990],[6580,6582],[6645,6647],[7167,7168],[7230,7231],"Update the dependencies array to be: [props.cellNumber, props.svgSize, props.version]",{"range":"306","text":"307"},[1909,1942],"[props.cellNumber, props.svgSize, props.version]"]